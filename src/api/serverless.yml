service: bikes-service-api

provider:
  name: aws
  region: eu-central-1
  runtime: nodejs14.x
  environment:
    BIKES_TABLE_NAME: bikes
    user_pool_id: { Ref: CognitoUserPool }
    client_id: { Ref: CognitoUserPoolClient }
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.BIKES_TABLE_NAME}"

functions:
  list:
    handler: functions/bikes/list.listBikes
    events:
      - http:
          path: bikes/list/all
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  listAvailable:
    handler: functions/bikes/listAvailable.listAvailableBikes
    events:
      - http:
          path: bikes/list/available/location/{location}
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  listLocations:
    handler: functions/bikes/listLocations.listLocations
    events:
      - http:
          path: bikes/list/locations
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  create:
    handler: functions/bikes/create.createBike
    events:
      - http:
          path: bikes/create
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  get:
    handler: functions/bikes/get.getBike
    events:
      - http:
          path: bikes/{id}
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  updateUsed:
    handler: functions/bikes/updateUsed.updateBikeUsed
    events:
      - http:
          path: bikes/update/used
          method: patch
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  updateActive:
    handler: functions/bikes/updateActive.updateBikeActive
    events:
      - http:
          path: bikes/update/active
          method: patch
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  delete:
    handler: functions/bikes/delete.deleteBike
    events:
      - http:
          path: bikes/delete
          method: delete
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

resources:
  Resources:
    DynamoDbTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1   # determine actual values?
          WriteCapacityUnits: 1  # same
        TableName: ${self:provider.environment.BIKES_TABLE_NAME}
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        MfaConfiguration: OFF
        UserPoolName: user-pool
        UsernameAttributes:
          - email
        Schema:
          - AttributeDataType: String
            Name: email
            Required: false
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: True
            RequireNumbers: True
            RequireSymbols: True
            RequireUppercase: True
        AutoVerifiedAttributes: [ "email" ]
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: user-pool-client
        GenerateSecret: true #?
        UserPoolId: { Ref: CognitoUserPool }
        AccessTokenValidity: 5 # in hours
        IdTokenValidity: 5
#        ExplicitAuthFlows:
#          - "ADMIN_NO_SRP_AUTH"
    ApiGatewayAuthorizer:
      DependsOn:
        - ApiGatewayRestApi
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: cognito-authorizer
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt: [ CognitoUserPool, Arn ]
    CognitoIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: IdentityPool
        AllowUnauthenticatedIdentities: false
        CognitoIdentityProviders:
          - ClientId:
              Ref: CognitoUserPoolClient
            ProviderName:
              Fn::GetAtt: [ "CognitoUserPool", "ProviderName" ]
      # IAM roles
    CognitoIdentityPoolRoles:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId:
          Ref: CognitoIdentityPool
        Roles:
          authenticated:
            Fn::GetAtt: [ CognitoAuthRole, Arn ]

    # IAM role used for authenticated users
    CognitoAuthRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Principal:
                Federated: 'cognito-identity.amazonaws.com'
              Action:
                - 'sts:AssumeRoleWithWebIdentity'
              Condition:
                StringEquals:
                  'cognito-identity.amazonaws.com:aud':
                    Ref: CognitoIdentityPool
                'ForAnyValue:StringLike':
                  'cognito-identity.amazonaws.com:amr': authenticated
        Policies:
          - PolicyName: 'CognitoAuthorizedPolicy'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: 'Allow'
                  Action:
                    - 'mobileanalytics:PutEvents'
                    - 'cognito-sync:*'
                    - 'cognito-identity:*'
                  Resource: '*'

#                # Allow users to invoke our API
#                - Effect: 'Allow'
#                  Action:
#                    - 'execute-api:Invoke'
#                  Resource:
#                    Fn::Join:
#                      - ''
#                      - - 'arn:aws:execute-api:'
#                        - Ref: AWS::Region
#                        - ':'
#                        - Ref: AWS::AccountId
#                        - ':'
#                        - Ref: ApiGatewayRestApi
#                        - '/*'

