service: bikes-service-api

provider:
  name: aws
  region: eu-central-1
  runtime: nodejs14.x
  environment:
    BIKES_TABLE_NAME: bikes
    user_pool_id: { Ref: CognitoUserPool }
    client_id: { Ref: CognitoUserPoolClient }
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.BIKES_TABLE_NAME}"

functions:
  list:
    handler: functions/bikes/list.listBikes
    events:
      - http:
          path: bikes/list
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  create:
    handler: functions/bikes/create.createBike
    events:
      - http:
          path: bikes/create
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  get:
    handler: functions/bikes/get.getBike
    events:
      - http:
          path: bikes/{id}
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  update:
    handler: functions/bikes/update.updateBike
    events:
      - http:
          path: bikes/update
          method: patch
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  delete:
    handler: functions/bikes/delete.deleteBike
    events:
      - http:
          path: bikes/delete
          method: delete
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

resources:
  Resources:
    UsersDynamoDbTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: manufacturer
            AttributeType: S
          - AttributeName: location
            AttributeType: S
          - AttributeName: active
            AttributeType: B
          - AttributeName: used
            AttributeType: B
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1   # determine actual values?
          WriteCapacityUnits: 1  # same
        TableName: ${self:provider.environment.BIKES_TABLE_NAME}
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        MfaConfiguration: OFF
        UserPoolName: user-pool
        UsernameAttributes:
          - email
        Schema:
          - AttributeDataType: String
            Name: email
            Required: false
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: True
            RequireNumbers: True
            RequireSymbols: True
            RequireUppercase: True
        AutoVerifiedAttributes: [ "email" ]
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: user-pool-client
        GenerateSecret: true #?
        UserPoolId: { Ref: CognitoUserPool }
        AccessTokenValidity: 5 # in hours
        IdTokenValidity: 5
#        ExplicitAuthFlows:
#          - "ADMIN_NO_SRP_AUTH"
    ApiGatewayAuthorizer:
      DependsOn:
        - ApiGatewayRestApi
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: cognito-authorizer
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt: [ CognitoUserPool, Arn ]
#    CognitoIdentityPool:
#      Type: AWS::Cognito::IdentityPool
#      Properties:
#        IdentityPoolName: IdentityPool
#        AllowUnauthenticatedIdentities: false
#        # Link to our User Pool
#        CognitoIdentityProviders:
#          - ClientId:
#              Ref: CognitoUserPoolClient
#            ProviderName:
#              Fn::GetAtt: [ "CognitoUserPool", "ProviderName" ]
#      # IAM roles
#    CognitoIdentityPoolRoles:
#      Type: AWS::Cognito::IdentityPoolRoleAttachment
#      Properties:
#        IdentityPoolId:
#          Ref: CognitoIdentityPool
#        Roles:
#          authenticated:
#            Fn::GetAtt: [ CognitoAuthRole, Arn ]

